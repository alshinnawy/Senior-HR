/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package j2se.xe.github.dao;

import java.util.Date;
import j2se.xe.github.dto.*;
import j2se.xe.github.exceptions.*;

public interface TestUsersDao
{
	/** 
	 * Inserts a new row in the TEST_USERS table.
	 */
	public TestUsersPk insert(TestUsers dto) throws TestUsersDaoException;

	/** 
	 * Updates a single row in the TEST_USERS table.
	 */
	public void update(TestUsersPk pk, TestUsers dto) throws TestUsersDaoException;

	/** 
	 * Deletes a single row in the TEST_USERS table.
	 */
	public void delete(TestUsersPk pk) throws TestUsersDaoException;

	/** 
	 * Returns the rows from the TEST_USERS table that matches the specified primary-key value.
	 */
	public TestUsers findByPrimaryKey(TestUsersPk pk) throws TestUsersDaoException;

	/** 
	 * Returns all rows from the TEST_USERS table that match the criteria 'USER_ID = :userId'.
	 */
	public TestUsers findByPrimaryKey(int userId) throws TestUsersDaoException;

	/** 
	 * Returns all rows from the TEST_USERS table that match the criteria ''.
	 */
	public TestUsers[] findAll() throws TestUsersDaoException;

	/** 
	 * Returns all rows from the TEST_USERS table that match the criteria 'USER_ID = :userId'.
	 */
	public TestUsers[] findWhereUserIdEquals(int userId) throws TestUsersDaoException;

	/** 
	 * Returns all rows from the TEST_USERS table that match the criteria 'USER_NAME = :userName'.
	 */
	public TestUsers[] findWhereUserNameEquals(String userName) throws TestUsersDaoException;

	/** 
	 * Returns all rows from the TEST_USERS table that match the criteria 'USER_ADDRESS = :userAddress'.
	 */
	public TestUsers[] findWhereUserAddressEquals(String userAddress) throws TestUsersDaoException;

	/** 
	 * Returns all rows from the TEST_USERS table that match the criteria 'USER_MOBILE = :userMobile'.
	 */
	public TestUsers[] findWhereUserMobileEquals(String userMobile) throws TestUsersDaoException;

	/** 
	 * Returns all rows from the TEST_USERS table that match the criteria 'USER_HIRE_DATE = :userHireDate'.
	 */
	public TestUsers[] findWhereUserHireDateEquals(Date userHireDate) throws TestUsersDaoException;

	/** 
	 * Returns all rows from the TEST_USERS table that match the criteria 'USER_DESCRIPTION = :userDescription'.
	 */
	public TestUsers[] findWhereUserDescriptionEquals(String userDescription) throws TestUsersDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the TEST_USERS table that match the specified arbitrary SQL statement
	 */
	public TestUsers[] findByDynamicSelect(String sql, Object[] sqlParams) throws TestUsersDaoException;

	/** 
	 * Returns all rows from the TEST_USERS table that match the specified arbitrary SQL statement
	 */
	public TestUsers[] findByDynamicWhere(String sql, Object[] sqlParams) throws TestUsersDaoException;

}
